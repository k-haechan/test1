name: Î≤ÑÏ†Ñ ÌÉúÍπÖ Î∞è AWS Î∞∞Ìè¨ ÏûêÎèôÌôî

on:
  pull_request:
    branches: [main]
    types: [closed] # PRÏù¥ Î®∏ÏßÄÎê† ÎïåÎßå ÏûëÎèô

jobs:
  bump-version-and-release:
    if: github.event.pull_request.merged == true
    name: Î≤ÑÏ†Ñ ÏóÖÎç∞Ïù¥Ìä∏ Î∞è Î¶¥Î¶¨Ïä§ ÏÉùÏÑ±
    runs-on: ubuntu-latest
    outputs:
      tag_name: ${{ steps.split_and_bump.outputs.new_tag }}
    steps:
      - name: Ï†ÄÏû•ÏÜå Ï≤¥ÌÅ¨ÏïÑÏõÉ
        uses: actions/checkout@v4

      - name: ÏµúÏã† Î≤ÑÏ†Ñ ÌÉúÍ∑∏ Í∞ÄÏ†∏Ïò§Í∏∞
        id: get_latest
        run: |
          git fetch --tags
          TAG=$(git tag --sort=-v:refname | head -n 1)
          if [[ -z "$TAG" ]]; then
            TAG="v0.0.0"
          fi
          echo "LATEST_TAG=$TAG" >> $GITHUB_ENV

      - name: Î≤ÑÏ†Ñ ÏóÖÎç∞Ïù¥Ìä∏ Ï≤òÎ¶¨
        id: split_and_bump
        run: |
          VERSION=${{ env.LATEST_TAG }}
          VERSION="${VERSION#v}" # 'v' Ï†úÍ±∞
          MAJOR=$(echo $VERSION | cut -d. -f1)
          MINOR=$(echo $VERSION | cut -d. -f2)
          PATCH=$(echo $VERSION | cut -d. -f3)

          LABELS_JSON='${{ toJson(github.event.pull_request.labels) }}'
          LABEL_NAMES=$(echo "$LABELS_JSON" | jq -r '.[].name')

          VERSION_TYPE=""
          for label in $LABEL_NAMES; do
            if [[ "$label" == "major" ]]; then
              VERSION_TYPE="major"
            elif [[ "$label" == "minor" ]]; then
              VERSION_TYPE="minor"
            elif [[ "$label" == "patch" ]]; then
              VERSION_TYPE="patch"
            fi
          done

          if [[ -z "$VERSION_TYPE" ]]; then
            echo "‚ùå Ïú†Ìö®Ìïú Î≤ÑÏ†Ñ ÎùºÎ≤®Ïù¥ ÏóÜÏäµÎãàÎã§."
            exit 1
          fi

          case $VERSION_TYPE in
            major)
              MAJOR=$((MAJOR + 1))
              MINOR=0
              PATCH=0
              ;;
            minor)
              MINOR=$((MINOR + 1))
              PATCH=0
              ;;
            patch)
              PATCH=$((PATCH + 1))
              ;;
          esac

          NEW_TAG="v$MAJOR.$MINOR.$PATCH"
          echo "NEW_TAG=$NEW_TAG" >> $GITHUB_ENV
          echo "new_tag=$NEW_TAG" >> $GITHUB_OUTPUT

      - name: Git ÌÉúÍ∑∏ ÏÉùÏÑ± Î∞è Ìë∏Ïãú
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@users.noreply.github.com"
          git tag ${{ env.NEW_TAG }}
          git push origin ${{ env.NEW_TAG }}

      - name: GitHub Î¶¥Î¶¨Ïä§ ÏÉùÏÑ±
        uses: softprops/action-gh-release@v2.2.2
        with:
          tag_name: ${{ env.NEW_TAG }}
          name: Î¶¥Î¶¨Ïä§ ${{ env.NEW_TAG }}
          body: |
            üîñ PR Î≤àÌò∏: #${{ github.event.pull_request.number }}
            üîß ÏûëÏÑ±Ïûê: @${{ github.event.pull_request.user.login }}
            üìù Î≥ÄÍ≤ΩÏÇ¨Ìï≠: ${{ github.event.pull_request.title }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-image-and-push:
    name: ÎèÑÏª§ Ïù¥ÎØ∏ÏßÄ ÎπåÎìúÏôÄ Ìë∏Ïãú
    needs: bump-version-and-release
    runs-on: ubuntu-latest
    env:
      DOCKER_IMAGE_NAME: ${{ vars.DOCKER_IMAGE_NAME }}
    outputs:
      DOCKER_IMAGE_NAME: ${{ env.DOCKER_IMAGE_NAME }}
      OWNER_LC: ${{ env.OWNER_LC }}
    steps:
      - uses: actions/checkout@v4

      - name: .env ÌååÏùº ÏÉùÏÑ±
        env:
          ENV_FILE_CONTENT: ${{ secrets.ENV_FILE }}
        run: echo "$ENV_FILE_CONTENT" > .env

      - name: Docker Buildx ÏÑ§Ïπò
        uses: docker/setup-buildx-action@v3

      - name: Î†àÏßÄÏä§Ìä∏Î¶¨ Î°úÍ∑∏Ïù∏
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: set lower case owner name
        run: echo "OWNER_LC=${OWNER,,}" >> $GITHUB_ENV
        env:
          OWNER: "${{ github.repository_owner }}"

      - name: ÎπåÎìú Ïï§ Ìë∏Ïãú
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          cache-from: type=registry,ref=ghcr.io/${{ env.OWNER_LC }}/${{ env.DOCKER_IMAGE_NAME }}:cache
          cache-to: type=registry,ref=ghcr.io/${{ env.OWNER_LC }}/${{ env.DOCKER_IMAGE_NAME }}:cache,mode=max
          tags: |
            ghcr.io/${{ env.OWNER_LC }}/${{ env.DOCKER_IMAGE_NAME }}:${{ needs.bump-version-and-release.outputs.tag_name }}
            ghcr.io/${{ env.OWNER_LC }}/${{ env.DOCKER_IMAGE_NAME }}:latest

#  deploy:
#    name: Î∞∞Ìè¨
#    runs-on: ubuntu-latest
#    needs: build-image-and-push
#    permissions:
#      id-token: write
#      contents: read
#    env:
#      DOCKER_IMAGE_NAME: ${{ needs.build-image-and-push.outputs.DOCKER_IMAGE_NAME }}
#      OWNER_LC: ${{ needs.build-image-and-push.outputs.OWNER_LC }}
#
#    steps:
#      - name: AWS Î°úÍ∑∏Ïù∏ (OIDC)
#        uses: aws-actions/configure-aws-credentials@v4
#        with:
#          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/dev-github-actions-role
#          aws-region: ap-northeast-2
#
#      - name: Ïó¨Îü¨ Ïù∏Ïä§ÌÑ¥Ïä§ ID Í∞ÄÏ†∏Ïò§Í∏∞
#        id: get_instance_ids
#        run: |
#          INSTANCE_IDS=$(aws ec2 describe-instances \
#            --filters "Name=tag:Role,Values=app-server" "Name=instance-state-name,Values=running" \
#            --query "Reservations[].Instances[].InstanceId" --output text)
#          echo "INSTANCE_IDS=$INSTANCE_IDS"
#          echo "INSTANCE_IDS=$INSTANCE_IDS" >> $GITHUB_ENV
#
#      - name: Ïó¨Îü¨ Ïù∏Ïä§ÌÑ¥Ïä§Ïóê Î∞∞Ìè¨ Î™ÖÎ†π Ïã§Ìñâ
#        run: |
#          for ID in $INSTANCE_IDS; do
#            aws ssm send-command \
#              --instance-ids "$ID" \
#              --document-name "AWS-RunShellScript" \
#              --parameters '{"commands":["docker pull ghcr.io/${{ env.OWNER_LC }}/${{ env.DOCKER_IMAGE_NAME }}:latest","docker stop app1 || true","docker rm app1 || true","docker run -d --network common --name app1 -p 8080:8080 ghcr.io/${{ env.OWNER_LC }}/${{ env.DOCKER_IMAGE_NAME }}:latest","docker rmi $(docker images -f '\''dangling=true'\'' -q)"]}' \
#              --comment "Deploy app" \
#              --region ap-northeast-2
#          done
